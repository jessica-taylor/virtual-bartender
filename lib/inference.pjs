var assert = require('assert');
var _ = require('underscore');

var Drink = require('./drink');

var P_WANT_PROPERTY = 0.2;
var P_WANT_NOT_PROPERTY = 0.1;
var P_CARE_ABOUT_PROPERTY = P_WANT_PROPERTY + P_WANT_NOT_PROPERTY;
var P_SAY_IF_WANT = 0.5;
var P_SAY_IF_INDIFFERENT = 0.1;
var P_SAY_IF_WANT_NOT = 0.02;

var P_POSITIVE = 0.1;
var P_NEGATIVE = 0.1;

var BURN_IN = 1000;
var NUM_SAMPS = 1000;
var LAG = 10;

var BURN_IN_SAMPS = Math.floor(BURN_IN / LAG);

function initState() {
  var state = {properties: {}};
  _.each(Drink.allCriteria, function(crit) {
    // prior probability
    if (flip(P_CARE_ABOUT_PROPERTY)) {
      state.properties[prop] = flip(P_WANT_PROPERTY / P_CARE_ABOUT_PROPERTY);
    } else {
      state.properties[prop] = null;
    }
  });
  state.positive = flip(P_POSITIVE);
  state.negative = flip(P_NEGATIVE);
}

function transitionState(state, action) {
  var newState = {properties: _.clone(state.properties)};
  newState.positive = flip(P_POSITIVE);
  newState.negative = flip(P_NEGATIVE);
  return newState;
}

function conditionObservation(state, observation) {
  var saidIndex = multinomial(_.pluck(observation, 'probability'));
  var saidValues = observation[saidIndex];
  // TODO: condition things that aren't properties
  _.each(_.keys(state.properties), function(prop) {
    var propVal = state.properties[prop];
    var probSayT = propVal === null ? P_SAY_IF_INDIFFERENT :
                   propVal === true ? P_SAY_IF_WANT :
                                      P_SAY_IF_WANT_NOT;
    var probSayF = propVal === null ? P_SAY_IF_INDIFFERENT :
                   propVal === true ? P_SAY_IF_WANT_NOT :
                                      P_SAY_IF_WANT;
    var probSayNull = 1 - probSayT - probSayF;
    assert(probSayNull > 0);
    var said = saidValues.properties[prop];
    assert(said !== undefined);
    var saidNumber = saidVal === true  ? 0 :
                     saidVal === false ? 1 : 2;
    // This conditions on a flip with probability probObs returning
    // observation[prop] more efficiently.
    multinomial([probSayT, probSayF, probSayNull], true, saidNumber);
  });
  _.each(['positive', 'negative'], function(special) {
    flip(state[special] ? P_SAY_IF_WANT : P_SAY_IF_INDIFFERENT, saidValues[special]);
  });
  return saidIndex;
}

function inferHistory(model, observations, actions) {
  assert.equal(observations.length, actions.length + 1);
  var samps = traceMH(function() {
    var history = [];
    var state = model.initState();
    history.push({state: state});
    for (var i = 0; i < observations.length; i++) {
      var saidIndex = model.conditionObservation(state, observations[i]);
      if (i < actions.length) {
        state = model.transitionState(state, actions[i]);
        history.push({state: state, saidIndex: saidIndex});
      }
    }
    return history;
  }, NUM_SAMPS + BURN_IN_SAMPS, LAG, false, 'lessdumb');
  return _.pluck(samps.slice(BURN_IN_SAMPS), 'sample');
}

module.exports = {
  inferHistory: inferHistory
};
